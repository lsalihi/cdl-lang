{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CDL - Cognitive Domain Language","text":"<p>A DSL for defining business logic in a declarative, traceable, and executable way.</p>"},{"location":"#what-is-cdl","title":"What is CDL?","text":"<p>CDL (Cognitive Domain Language) allows you to describe business intents, rules, policies, and flows with metadata for evidence and trust. It's designed for executable specifications that can generate APIs, policies, and tests.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Parser: ANTLR-based lexer and parser for CDL syntax</li> <li>AST Builder: Constructs abstract syntax tree</li> <li>Symbol Table: Detects duplicate IDs</li> <li>Type Checker: Basic validation of meta values</li> <li>IR Generation: Intermediate representation</li> <li>OpenAPI Backend: Generates API specs from intents/mappings</li> <li>Rego Backend: Generates OPA policies</li> <li>Linter: Checks for errors with codes</li> <li>Formatter: Consistent style formatting</li> <li>CLI: Unified command-line interface</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone the repo\ngit clone https://github.com/lsalihi/cdl-lang.git\ncd cdl-lang\n\n# Build\n./gradlew build\n\n# Run demo\n./demo.sh\n\n# Use CLI\njava -cp build/classes/java/main:antlr-4.13.1-complete.jar com.cdl.CDLCLI gen openapi -i sample.cdl -o api.yaml\n</code></pre>"},{"location":"#installation","title":"Installation","text":""},{"location":"#docker","title":"Docker","text":"<pre><code>docker run --rm -v \"$PWD\":/w ghcr.io/lsalihi/cdl-lang:latest \\\n  cdl gen openapi -i /w/sample.cdl -o /w/api.yaml\n</code></pre>"},{"location":"#local-build","title":"Local Build","text":"<pre><code>./gradlew build\njava -cp build/classes/java/main:antlr-4.13.1-complete.jar com.cdl.CDLCLI --help\n</code></pre>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub Repository</li> <li>Issues</li> <li>Discussions</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#cli-commands","title":"CLI Commands","text":""},{"location":"api/#cdl-build","title":"cdl build","text":"<p>Parse CDL to IR.</p> <pre><code>cdl build -i &lt;input.cdl&gt; -o &lt;output.ir.json&gt;\n</code></pre>"},{"location":"api/#cdl-gen-openapi","title":"cdl gen openapi","text":"<p>Generate OpenAPI spec.</p> <pre><code>cdl gen openapi -i &lt;input.cdl&gt; -o &lt;output.yaml&gt;\n</code></pre>"},{"location":"api/#cdl-fmt","title":"cdl fmt","text":"<p>Format CDL file.</p> <pre><code>cdl fmt -i &lt;input.cdl&gt; [-o &lt;output.cdl&gt;]\n</code></pre>"},{"location":"api/#cdl-lint","title":"cdl lint","text":"<p>Lint for errors.</p> <pre><code>cdl lint -i &lt;input.cdl&gt;\n</code></pre>"},{"location":"api/#java-api","title":"Java API","text":""},{"location":"api/#compiler","title":"Compiler","text":"<pre><code>import com.cdl.Compiler;\n\nCompiler.Result result = Compiler.compile(\"file.cdl\");\nString openapi = result.openapi;\n</code></pre>"},{"location":"api/#backends","title":"Backends","text":"<pre><code>import com.cdl.backends.OpenAPIGenerator;\nimport com.cdl.backends.RegoGenerator;\n\nString openapi = OpenAPIGenerator.generate(ir);\nString rego = RegoGenerator.generate(ir);\n</code></pre>"},{"location":"api/#error-codes","title":"Error Codes","text":"<ul> <li>E001: Duplicate ID</li> <li>E002: Invalid type</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic-intent","title":"Basic Intent","text":"<pre><code>intent INTERBANK_TRANSFER\ngoal: \"Process an SEPA interbank transfer\"\ninputs: \"[accountId: String, amount: Money_EUR]\"\noutputs: \"[paymentId: PaymentId]\"\nevidence: \"[repo_legacy_PAYMENT_CBL_145_189, trace_POST_payments_at_2023_11_10]\"\ntags: \"[payments, sepa]\"\ntrust: \"{confidence: 0.85, components: {evidence: 0.90, consistency: 0.80, tests: 0.75}}\"\nend\n</code></pre>"},{"location":"examples/#with-mapping","title":"With Mapping","text":"<pre><code>intent PROCESS_PAYMENT\ngoal: \"Process a payment\"\ninputs: \"[amount: Money, account: String]\"\noutputs: \"[id: String]\"\nevidence: \"[legacy_code]\"\ntags: \"[finance]\"\nend\n\nmapping PROCESS_PAYMENT -&gt; \"api POST /api/payments\"\nrequest: \"PaymentRequest\"\nresponse: \"PaymentResponse\"\nend\n</code></pre>"},{"location":"examples/#rule","title":"Rule","text":"<pre><code>rule IBAN_MUST_BE_VALID\nstatement: \"The IBAN must be valid before issuance\"\napplies_to: \"INTERBANK_TRANSFER\"\nevidence: \"[repo_legacy_VALIDATE_CBL_180_206]\"\ntest_hints: \"Invalid IBAN =&gt; 400\"\ntype: \"validation\"\nend\n</code></pre>"},{"location":"examples/#generated-openapi","title":"Generated OpenAPI","text":"<p>From the payment example:</p> <pre><code>openapi: 3.0.0\ninfo:\n  title: CDL API\n  version: 1.0.0\npaths:\n  /api/payments:\n    post:\n      summary: Generated from PROCESS_PAYMENT\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PaymentRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaymentResponse'\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Get started with CDL in 5 minutes.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 17+</li> <li>Gradle (or use wrapper)</li> </ul>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#option-1-docker-recommended","title":"Option 1: Docker (Recommended)","text":"<pre><code># Pull the image\ndocker pull ghcr.io/lsalihi/cdl-lang:latest\n\n# Run a command\ndocker run --rm -v \"$PWD\":/w ghcr.io/lsalihi/cdl-lang:latest \\\n  cdl gen openapi -i /w/sample.cdl -o /w/api.yaml\n</code></pre>"},{"location":"quickstart/#option-2-local-build","title":"Option 2: Local Build","text":"<pre><code># Clone\ngit clone https://github.com/lsalihi/cdl-lang.git\ncd cdl-lang\n\n# Build\n./gradlew build\n\n# Verify\njava -cp build/classes/java/main:antlr-4.13.1-complete.jar com.cdl.CDLCLI --help\n</code></pre>"},{"location":"quickstart/#your-first-cdl-file","title":"Your First CDL File","text":"<p>Create <code>myintent.cdl</code>:</p> <pre><code>intent PROCESS_PAYMENT\ngoal: \"Process a payment transaction\"\ninputs: \"[amount: Money, account: String]\"\noutputs: \"[id: String]\"\nevidence: \"[legacy_code]\"\ntags: \"[finance]\"\nend\n\nmapping PROCESS_PAYMENT -&gt; \"api POST /api/payments\"\nrequest: \"PaymentRequest\"\nresponse: \"PaymentResponse\"\nend\n</code></pre>"},{"location":"quickstart/#generate-openapi","title":"Generate OpenAPI","text":"<pre><code>cdl gen openapi -i myintent.cdl -o api.yaml\n</code></pre> <p>This creates a valid OpenAPI 3.0 spec you can import into Swagger or Postman.</p>"},{"location":"quickstart/#run-tests","title":"Run Tests","text":"<pre><code># Lint for errors\ncdl lint -i myintent.cdl\n\n# Format the file\ncdl fmt -i myintent.cdl\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore examples</li> <li>Read the specification</li> <li>Check API reference</li> </ul>"},{"location":"spec/","title":"Specification","text":""},{"location":"spec/#overview","title":"Overview","text":"<p>CDL (Cognitive Domain Language) is a DSL for defining business logic in a declarative, traceable, and executable way. It focuses on intents, rules, policies, flows, and mappings with metadata for evidence and trust.</p>"},{"location":"spec/#concepts","title":"Concepts","text":"<ul> <li>Intent: Describes a business goal with inputs, outputs, evidence, and trust scores.</li> <li>Rule: Defines validation or business rules with conditions.</li> <li>Policy: Governance policies for compliance.</li> <li>Flow: Sequences of steps with guards.</li> <li>Mapping: Binds intents to external APIs or systems.</li> </ul>"},{"location":"spec/#grammar","title":"Grammar","text":"<p>See <code>src/main/antlr/CDL.g4</code> for the ANTLR grammar.</p>"},{"location":"spec/#ir-intermediate-representation","title":"IR (Intermediate Representation)","text":"<p>JSON structure: <pre><code>{\n  \"intents\": [...],\n  \"mappings\": [...]\n}\n</code></pre></p>"},{"location":"spec/#backends","title":"Backends","text":"<ul> <li>OpenAPI 3.0: Generates API specs from intents/mappings.</li> <li>Rego: Generates OPA policies.</li> </ul>"},{"location":"spec/#error-codes","title":"Error Codes","text":"<ul> <li>E001: Duplicate ID</li> <li>E002: Invalid type</li> </ul>"},{"location":"spec/#versioning","title":"Versioning","text":"<p>SemVer: v0.5-MVP</p>"}]}