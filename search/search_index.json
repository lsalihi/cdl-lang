{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CDL - Cognitive Domain Language","text":"<p>A DSL for defining business logic in a declarative, traceable, and executable way.</p>"},{"location":"#what-is-cdl","title":"What is CDL?","text":"<p>CDL (Cognitive Domain Language) allows you to describe business intents, rules, policies, and flows with metadata for evidence and trust. It's designed for executable specifications that can generate APIs, policies, and tests.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Parser: ANTLR-based lexer and parser for CDL syntax</li> <li>AST Builder: Constructs abstract syntax tree</li> <li>Symbol Table: Detects duplicate IDs</li> <li>Type Checker: Basic validation of meta values</li> <li>IR Generation: Intermediate representation</li> <li>OpenAPI Backend: Generates API specs from intents/mappings</li> <li>Rego Backend: Generates OPA policies</li> <li>Linter: Checks for errors with codes</li> <li>Formatter: Consistent style formatting</li> <li>CLI: Unified command-line interface</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone the repo\ngit clone https://github.com/lsalihi/cdl-lang.git\ncd cdl-lang\n\n# Build\n./gradlew build\n\n# Run demo\n./demo.sh\n\n# Use CLI\njava -cp build/classes/java/main:antlr-4.13.1-complete.jar com.cdl.CDLCLI gen openapi -i sample.cdl -o api.yaml\n</code></pre>"},{"location":"#installation","title":"Installation","text":""},{"location":"#docker","title":"Docker","text":"<pre><code>docker run --rm -v \"$PWD\":/w ghcr.io/lsalihi/cdl-lang:latest \\\n  cdl gen openapi -i /w/sample.cdl -o /w/api.yaml\n</code></pre>"},{"location":"#local-build","title":"Local Build","text":"<pre><code>./gradlew build\njava -cp build/classes/java/main:antlr-4.13.1-complete.jar com.cdl.CDLCLI --help\n</code></pre>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub Repository</li> <li>Issues</li> <li>Discussions</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#cli-commands","title":"CLI Commands","text":""},{"location":"api/#cdl-build","title":"cdl build","text":"<p>Parse CDL to IR.</p> <pre><code>cdl build -i &lt;input.cdl&gt; -o &lt;output.ir.json&gt;\n</code></pre>"},{"location":"api/#cdl-gen-openapi","title":"cdl gen openapi","text":"<p>Generate OpenAPI spec.</p> <pre><code>cdl gen openapi -i &lt;input.cdl&gt; -o &lt;output.yaml&gt;\n</code></pre>"},{"location":"api/#cdl-fmt","title":"cdl fmt","text":"<p>Format CDL file.</p> <pre><code>cdl fmt -i &lt;input.cdl&gt; [-o &lt;output.cdl&gt;]\n</code></pre>"},{"location":"api/#cdl-lint","title":"cdl lint","text":"<p>Lint for errors.</p> <pre><code>cdl lint -i &lt;input.cdl&gt;\n</code></pre>"},{"location":"api/#java-api","title":"Java API","text":""},{"location":"api/#compiler","title":"Compiler","text":"<pre><code>import com.cdl.Compiler;\n\nCompiler.Result result = Compiler.compile(\"file.cdl\");\nString openapi = result.openapi;\n</code></pre>"},{"location":"api/#backends","title":"Backends","text":"<pre><code>import com.cdl.backends.OpenAPIGenerator;\nimport com.cdl.backends.RegoGenerator;\n\nString openapi = OpenAPIGenerator.generate(ir);\nString rego = RegoGenerator.generate(ir);\n</code></pre>"},{"location":"api/#error-codes","title":"Error Codes","text":"<ul> <li>E001: Duplicate ID</li> <li>E002: Invalid type</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#type-definitions-v060","title":"Type Definitions (v0.6.0)","text":"<pre><code>type Money\n  amount: decimal where amount &gt;= 0\n  currency: string\nend\n\ntype Customer\n  id: string\n  name: string where length(name) &gt;= 2\n  email: Email\n  age: int where age &gt;= 18\nend\n</code></pre>"},{"location":"examples/#typed-intent","title":"Typed Intent","text":"<pre><code>intent CREATE_CUSTOMER\n  goal: \"Create a new customer account\"\n  inputs: \"[customer: Customer]\"\n  outputs: \"[customerId: string, welcomeEmail: string]\"\n  evidence: \"[customer_registration_policy]\"\n  tags: \"[customer, registration]\"\nend\n</code></pre>"},{"location":"examples/#complex-types-with-constraints","title":"Complex Types with Constraints","text":"<pre><code>type Order\n  id: string\n  customerId: string\n  items: OrderItem\n  totalAmount: Money where totalAmount.amount &gt; 0\n  orderDate: date\n  deliveryDate: date where deliveryDate &gt;= orderDate\nend\n\ntype OrderItem\n  productId: string\n  quantity: int where quantity &gt; 0 and quantity &lt;= 100\n  unitPrice: Money\n  discount: decimal where discount &gt;= 0.0 and discount &lt;= 0.5\nend\n</code></pre>"},{"location":"examples/#business-rules","title":"Business Rules","text":"<pre><code>rule CUSTOMER_AGE_VALIDATION\n  statement: \"Customer must be of legal age\"\n  applies_to: \"CREATE_CUSTOMER\"\n  evidence: \"[gdpr_age_verification]\"\n  test_hints: \"Age &lt; 18 should be rejected\"\n  type: \"validation\"\nend\n\nrule ORDER_TOTAL_LIMIT\n  statement: \"Order total cannot exceed \u20ac100,000\"\n  applies_to: \"CREATE_ORDER\"\n  evidence: \"[fraud_prevention_policy]\"\n  test_hints: \"Test with orders over limit\"\n  type: \"business\"\nend\n</code></pre>"},{"location":"examples/#api-mapping","title":"API Mapping","text":"<pre><code>mapping CREATE_CUSTOMER -&gt; \"api POST /api/customers\"\n  request: \"CustomerRegistrationRequest\"\n  response: \"CustomerRegistrationResponse\"\nend\n\nmapping CREATE_ORDER -&gt; \"api POST /api/orders\"\n  request: \"OrderRequest\"\n  response: \"OrderResponse\"\nend\n</code></pre>"},{"location":"examples/#generated-openapi","title":"Generated OpenAPI","text":"<p>From the customer example:</p> <pre><code>openapi: 3.0.0\ninfo:\n  title: Customer API\n  version: 1.0.0\n\npaths:\n  /api/customers:\n    post:\n      summary: Create a new customer account\n      operationId: createCustomer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRegistrationRequest'\n      responses:\n        '200':\n          description: Customer created successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerRegistrationResponse'\n\ncomponents:\n  schemas:\n    Customer:\n      type: object\n      required:\n        - id\n        - name\n        - email\n        - age\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n          minLength: 2\n        email:\n          type: string\n          format: email\n        age:\n          type: integer\n          minimum: 18\n\n    CustomerRegistrationRequest:\n      type: object\n      required:\n        - customer\n      properties:\n        customer:\n          $ref: '#/components/schemas/Customer'\n\n    CustomerRegistrationResponse:\n      type: object\n      required:\n        - customerId\n        - welcomeEmail\n      properties:\n        customerId:\n          type: string\n        welcomeEmail:\n          type: string\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Get started with CDL in 5 minutes.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 17+</li> <li>Gradle (or use wrapper)</li> </ul>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#option-1-docker-recommended","title":"Option 1: Docker (Recommended)","text":"<pre><code># Pull the image\ndocker pull ghcr.io/lsalihi/cdl-lang:latest\n\n# Run a command\ndocker run --rm -v \"$PWD\":/w ghcr.io/lsalihi/cdl-lang:latest \\\n  cdl gen openapi -i /w/sample.cdl -o /w/api.yaml\n</code></pre>"},{"location":"quickstart/#option-2-local-build","title":"Option 2: Local Build","text":"<pre><code># Clone\ngit clone https://github.com/lsalihi/cdl-lang.git\ncd cdl-lang\n\n# Build\n./gradlew build\n\n# Verify\njava -cp build/classes/java/main:antlr-4.13.1-complete.jar com.cdl.CDLCLI --help\n</code></pre>"},{"location":"quickstart/#your-first-cdl-file","title":"Your First CDL File","text":"<p>Create <code>myintent.cdl</code>:</p> <pre><code>intent PROCESS_PAYMENT\ngoal: \"Process a payment transaction\"\ninputs: \"[amount: Money, account: String]\"\noutputs: \"[id: String]\"\nevidence: \"[legacy_code]\"\ntags: \"[finance]\"\nend\n\nmapping PROCESS_PAYMENT -&gt; \"api POST /api/payments\"\nrequest: \"PaymentRequest\"\nresponse: \"PaymentResponse\"\nend\n</code></pre>"},{"location":"quickstart/#generate-openapi","title":"Generate OpenAPI","text":"<pre><code>cdl gen openapi -i myintent.cdl -o api.yaml\n</code></pre> <p>This creates a valid OpenAPI 3.0 spec you can import into Swagger or Postman.</p>"},{"location":"quickstart/#run-tests","title":"Run Tests","text":"<pre><code># Lint for errors\ncdl lint -i myintent.cdl\n\n# Format the file\ncdl fmt -i myintent.cdl\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore examples</li> <li>Read the specification</li> <li>Check API reference</li> </ul>"},{"location":"spec/","title":"Specification","text":""},{"location":"spec/#overview","title":"Overview","text":"<p>CDL (Cognitive Domain Language) is a DSL for defining business logic in a declarative, traceable, and executable way. It focuses on intents, rules, policies, flows, and mappings with metadata for evidence and trust. Version 0.6.0 adds a complete type system for type-safe specifications.</p>"},{"location":"spec/#concepts","title":"Concepts","text":"<ul> <li>Intent: Describes a business goal with typed inputs, outputs, evidence, and trust scores.</li> <li>Rule: Defines validation or business rules with conditions.</li> <li>Policy: Governance policies for compliance.</li> <li>Flow: Sequences of steps with guards.</li> <li>Mapping: Binds intents to external APIs or systems.</li> <li>Type: Custom data types with field constraints (v0.6.0+).</li> </ul>"},{"location":"spec/#type-system-v060","title":"Type System (v0.6.0)","text":""},{"location":"spec/#built-in-types","title":"Built-in Types","text":"<ul> <li><code>string</code>: Text values</li> <li><code>int</code>: Integer numbers</li> <li><code>decimal</code>: Decimal numbers</li> <li><code>bool</code>: Boolean values</li> <li><code>date</code>: Date values (YYYY-MM-DD)</li> <li><code>datetime</code>: DateTime values (ISO 8601)</li> <li><code>Email</code>: Email addresses with validation</li> <li><code>Money</code>: Monetary values (amount + currency)</li> </ul>"},{"location":"spec/#type-definitions","title":"Type Definitions","text":"<pre><code>type Customer\n  id: string\n  name: string where length(name) &gt;= 2\n  email: Email\n  age: int where age &gt;= 18\nend\n</code></pre>"},{"location":"spec/#constraints","title":"Constraints","text":"<ul> <li>Comparison operators: <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code></li> <li>String functions: <code>length()</code>, <code>contains()</code>, <code>startsWith()</code>, <code>endsWith()</code></li> <li>Logical operators: <code>and</code>, <code>or</code>, <code>not</code></li> <li>Special functions: <code>today()</code>, <code>in [values]</code></li> </ul>"},{"location":"spec/#typed-intents","title":"Typed Intents","text":"<pre><code>intent CREATE_USER\n  inputs: \"[profile: Customer, password: string]\"\n  outputs: \"[userId: string, token: string]\"\nend\n</code></pre>"},{"location":"spec/#grammar","title":"Grammar","text":"<p>See <code>src/main/antlr/CDL.g4</code> for the ANTLR grammar.</p>"},{"location":"spec/#ir-intermediate-representation","title":"IR (Intermediate Representation)","text":"<p>JSON structure with type information: <pre><code>{\n  \"types\": [...],\n  \"intents\": [...],\n  \"mappings\": [...]\n}\n</code></pre></p>"},{"location":"spec/#backends","title":"Backends","text":"<ul> <li>OpenAPI 3.0: Generates type-safe API specs with validation schemas</li> <li>Rego: Generates OPA policies with type constraints</li> </ul>"},{"location":"spec/#error-codes","title":"Error Codes","text":"<ul> <li>E001: Duplicate ID</li> <li>E002: Invalid type</li> <li>E003: Missing evidence</li> <li>E004: Type not found</li> <li>E005: Invalid constraint</li> <li>E006: Circular type reference</li> <li>E007: Parameter type mismatch</li> </ul>"},{"location":"spec/#versioning","title":"Versioning","text":"<p>SemVer: v0.6.0 (Type System)</p>"}]}