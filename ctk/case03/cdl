# CTK Case03: Advanced Type Constraints

This test case validates advanced type constraints and complex business rules.

## CDL Specification

```cdl
type Customer
  id: string
  name: string where length(name) >= 2 and length(name) <= 100
  email: Email
  age: int where age >= 18 and age <= 120
  country: string where country in ["FR", "DE", "IT", "ES", "UK"]
  registrationDate: date
end

type BankAccount
  iban: string where startsWith(iban, "FR") and length(iban) == 27
  bic: string where length(bic) == 11
  balance: Money(EUR) where balance >= -1000
  isActive: bool
end

type TransferRequest
  fromAccount: string
  toAccount: string
  amount: Money(EUR) where amount > 0 and amount <= 50000
  description: string where length(description) <= 140
  executionDate: date where executionDate >= today()
end

intent EXECUTE_BANK_TRANSFER
  goal: "Execute a bank transfer between accounts"
  inputs: "[
    customer: Customer,
    transfer: TransferRequest,
    confirmAmount: decimal where confirmAmount == transfer.amount.amount
  ]"
  outputs: "[
    transferId: string,
    status: string where status in ['PENDING', 'EXECUTED', 'FAILED'],
    fee: Money(EUR),
    executionDate: date
  ]"
  evidence: "[sepa_transfer_regulation, bank_transfer_policy_v3]"
  tags: "[banking, transfer, sepa]"
end

rule VALID_IBAN_FORMAT
  statement: "IBAN must be valid format for French accounts"
  applies_to: "EXECUTE_BANK_TRANSFER"
  evidence: "[iban_iso_13616_standard]"
  test_hints: "Test various IBAN formats and lengths"
  type: "validation"
end

rule SUFFICIENT_FUNDS
  statement: "Account must have sufficient funds for transfer"
  applies_to: "EXECUTE_BANK_TRANSFER"
  evidence: "[banking_regulation_capital_requirements]"
  test_hints: "Test with various balance and transfer amounts"
  type: "business"
end

rule TRANSFER_LIMITS
  statement: "Transfer amount must be within regulatory limits"
  applies_to: "EXECUTE_BANK_TRANSFER"
  evidence: "[eu_payment_services_directive_2]"
  test_hints: "Test boundary values for transfer limits"
  type: "regulatory"
end

rule CUSTOMER_AGE_VERIFICATION
  statement: "Customer must be of legal age for banking operations"
  applies_to: "EXECUTE_BANK_TRANSFER"
  evidence: "[gdpr_age_verification_requirements]"
  test_hints: "Test age validation at boundaries"
  type: "compliance"
end

mapping EXECUTE_BANK_TRANSFER -> "api POST /api/transfers"
  request: "BankTransferRequest"
  response: "BankTransferResponse"
end
```

## Expected OpenAPI Output

```yaml
openapi: 3.0.0
info:
  title: Bank Transfer API
  version: 1.0.0
  description: API for executing bank transfers with regulatory compliance

paths:
  /api/transfers:
    post:
      summary: Execute a bank transfer between accounts
      operationId: executeBankTransfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankTransferRequest'
      responses:
        '200':
          description: Transfer executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransferResponse'

components:
  schemas:
    BankTransferRequest:
      type: object
      required:
        - customer
        - transfer
        - confirmAmount
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
        transfer:
          $ref: '#/components/schemas/TransferRequest'
        confirmAmount:
          type: number
          format: decimal

    BankTransferResponse:
      type: object
      required:
        - transferId
        - status
        - fee
        - executionDate
      properties:
        transferId:
          type: string
        status:
          type: string
          enum: [PENDING, EXECUTED, FAILED]
        fee:
          $ref: '#/components/schemas/Money'
        executionDate:
          type: string
          format: date

    Customer:
      type: object
      required:
        - id
        - name
        - email
        - age
        - country
        - registrationDate
      properties:
        id:
          type: string
        name:
          type: string
          minLength: 2
          maxLength: 100
        email:
          type: string
          format: email
        age:
          type: integer
          minimum: 18
          maximum: 120
        country:
          type: string
          enum: [FR, DE, IT, ES, UK]
        registrationDate:
          type: string
          format: date

    TransferRequest:
      type: object
      required:
        - fromAccount
        - toAccount
        - amount
        - description
        - executionDate
      properties:
        fromAccount:
          type: string
        toAccount:
          type: string
        amount:
          $ref: '#/components/schemas/Money'
        description:
          type: string
          maxLength: 140
        executionDate:
          type: string
          format: date

    Money:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          format: decimal
          minimum: 0
          maximum: 50000
        currency:
          type: string
          enum: [EUR]
```

## Validation Criteria

✅ **Complex Constraints**: Multiple constraint types (length, range, enum, string operations)
✅ **Cross-field Validation**: confirmAmount must equal transfer.amount.amount
✅ **Business Rules**: Age verification, fund sufficiency, regulatory limits
✅ **Advanced Types**: IBAN format validation, BIC validation
✅ **OpenAPI Generation**: Constraints properly translated to schema validations
